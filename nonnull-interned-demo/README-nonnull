Notes for the NonNull demos.


1. framework

(This is simpler to start with than the JUnit demo, even though JUnit is a
real program and this is my own.  But, this one shows bugs in my own
software, which shows humility and honesty.)

(I realize that this one isn't really that different from the previous example,
so it can be omitted for a shorter demo.
However, I don't think many people at the MIT JUG thought that the second
example was basically the same as the first.  At least a couple of audience
members at the MIT JUG demo were somewhat confused and/or unconvinced after
the first example. It seemed to me that after that first example, some
people thought it was simpler, like a heuristics-based tool, and not a full
type-checker, but after the second example, more of them "got it".)

* Open checkers/src/checkers/types/InternalAnnotationScanner.java:205.
  This is the code for visitNewArray.

* Run the checker.  There is an error in visitNewArray:
   * "method" is nullable because enclosingSymbol() might return null
     (contrary to the programmer's expectations again).
   * "method" is passed to annotationsFromElement which expects a non-null value.

  The main idea for this example is that we're verifying against a method
  specification, versus simply finding null dereferences.

* Fix the error by adding:

       if (method == null)
            return InternalAnnotationGroup.EMPTY;

* Re-run the checker; you should no longer see any errors.            


NOTE:  Sometimes you may see another, spurious error:

annotations/demos/nonnull-interned-demo/checkers/src/checkers/types/InternalAnnotationScanner.java:20: invalid type argument;
class InternalAnnotationScanner extends SimpleTreeVisitor<InternalAnnotationGroup, Void> {
                                                                                   ^
  found   : @Nullable Void
  required: @NonNull Object

To fix it, do
  touch $t/checker-framework-demos/nonnull-interned-demo/checkers/src/com/sun/source/util/SimpleTreeVisitor.java
and the error will go away and will not recur.  (This is weird behavior
that suggests there is a bug somewhere.)


2 & 3. JUnit

Open file JUnitTests.java.  Ask the audience what happens when you run the
code:  does the test pass or does it fail?

Now run the "test" task of build.xml.
JUnit itself throws a null pointer exception!


Open junit/src/org/junit/Assert.java

Note that @Nullable is the default in this file.  Or don't mention it
explicitly and discuss it only if it comes up in the course of a question?
[Discussing defaults during the demo may be confusing and distracting.
Would it be possible to not override the defaults during the demo?
A problem might be that that increases clutter. -MDE]

These were all real problems in a previous version of JUnit (4.3, I think).
(They have since been corrected.)

Run the checker.  There are three errors
 - at line 105 - expected parameter might be null
    Fix: add @NonNull to 'Object expected'

 - at line 152 - o1 and o2 might be null
    assertEquals checks the nullness of array parameters but not the array
    elements
    Fix: uncomment the commened code which checks for o1 and o2 nullness

 - at line 359,362 - expected and actual parameters might be null
    format() tries to output a meaningful message if both parameters have
    the same toString() representation but are of different classes.
    Fix: replace .getClass().getName() lines with the commented lines


Verify the correctness of the fixes by re-running the 'test' task of build.xml.


7. Pre- and post-condition demo, using plume-lib's ICalAvailable.

First, run it to show what it does.
(But, I can't currently run it.
See my file system at CSE and whether I can run it there.
Or, find an example of a past execution.)

Prep:
run:
make -C ~/bin/src/plume-lib-for-demo/ tags
(progn
  (visit-tags-table (expand-file-name "~/bin/src/plume-lib-for-demo/java/") nil)
  (find-file "~/bin/src/plume-lib-for-demo/java/src/plume/ICalAvailable.java")
  (compile "make typecheck-only" nil))

There are 5 warnings.
 1. Fix the first one by adding @RequiresNonNull("tz1")
 2. Skip over the second one, which is in main(); save this error and method it for later.
 3. Don't fix it yet (it's in main() too), but
    When examining this line, note that no warning is printed about tz2.
    Note the check just above.
          "Timezone: %s  [Timezone: %s]%n", printedTimezone(tz1), printedTimezone(tz2));
 4. Skip over the fourth one.
 5. Fix the fifth one by adding @RequiresNonNull("tz1")

Compile again.
Note a different problem earlier in main(). This is due to one of the added annotations.

Fix the problem by adding @EnsuresNonNull("tz1") in `processOptions`.
The whole program typechecks, so we have verified that there are no possible null pointer exceptions.

Try strengthening the processOptions() specification to @EnsuresNonNull({"tz1","tz2"}).
Note the error:  the typechecker doesn't just blindly trust your claims, it checks them all.


0. lookup
[Not in the Emacs bookmarks.]

* Open lookup/src/utilMDE/UtilMDE.java:563.
  We have the "deleteDir" method, which takes a directory (as a java.io.File) and
  deletes all of the files it contains and then the directory itself.

* You could ask the audience to identify the error in the code.

* Run the checker to show the error:  dir.listFiles returns a possibly-null
  array of non-null Files.  Pull up the Javadoc for listFiles here if
  possible to see that it returns null, not an empty array, if the file is
  not a directory.  Here, the programmer probably thought that the method
  would return an empty array.

* Fix the problem by adding a null check:

    if (files == null)
      throw new IllegalArgumentException(dir + " is not a directory");

  This appears at the end of the file if you want to cut and paste; but it
  doesn't appear commented out inline because that gives away the error to
  the audience.

* You can also change
    File[] files
  to 
    File @Nullable [] files
  but note that the proper types are inferred by the checker.  This reduces
  clutter.

* Re-run the checker to verify that there are no errors.

