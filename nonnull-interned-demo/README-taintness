Notes for the taintness demo

1. personalblog-demo

Open
  checker-framework/docs/tutorial/src/personalblog-demo/src/net/eyde/personalblog/service/PersonalBlogService.java

which is in the main Checker Framework repository, not this one.

* Note that 
1. PersonalBlogService.executeQuery() only accepts untainted queries,
2. PersonalBlogService.constructQuery is used to construct an untainted query.

* Run the taintness checker:
    ant -find build.xml check-tainting

  The checker issues a warning for .getPostsByCategory():
  (possibly) tainted string category is used in the query construction.
  Solution: add @Untainted to category parameter declaration.
  This forces clients to pass an @Untainted value, which was the intention
  of the designer of the getPostsByCategory method.

* Run the checker again.  There is an error in ReadAction.executeSub(),
  which is a client of getPostsByCategory:
  reqCategory is accepted from the user (from request object) without
    validation.
  (This is in a completely different file.)
  solution: apply the following diff to line 48
-    String reqCategory = cleanNull(request.getParameter("cat"));
+    String reqCategory = validate(cleanNull(request.getParameter("cat")));
  
* Run the checker one more time.  There are no errors.


[You can't do this because there is no pblog-tainting ant target any more.]
When you finish demoing the Basic Checker, you can show how the real
tainting checker handles string concatenation even though the Basic Checker
does not:

1. Note that constructQuery is only a helper function to suppress a  
tainting false error, because the Basic Checker doesn't handle it.
2. Replace both occurrences of constructQuery (at lines 162, 173) to  
simple string concatenation.
3. Run 'ant pblog', and you will get two errors related to using the  
concatenation as untainted string.
4. Run 'ant pblog-tainting' and no error is emitted.

